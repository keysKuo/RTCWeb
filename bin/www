#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rtcweb:server');
var http = require('http');
const { Server } = require('socket.io');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);

/**
 * Listen on provided port, on all network interfaces.
 */

 io.on('connection', socket => {
  socket.on('user joined room', roomId => {
      const room = io.sockets.adapter.rooms.get(roomId);
      
      if (room && room.size === 4) {
          socket.emit('server is full');
          return;
      }

      const otherUsers = [];

      if (room) {
          room.forEach(id => {
              otherUsers.push(id);
          })
      }

      socket.join(roomId);
      socket.emit('all other users', otherUsers);
  });

  socket.on('peer connection request', ({ userIdToCall, sdp }) => {
      io.to(userIdToCall).emit("connection offer", { sdp, callerId: socket.id });
  });

  socket.on('connection answer', ({ userToAnswerTo, sdp }) => {
      io.to(userToAnswerTo).emit('connection answer', { sdp, answererId: socket.id })
  });

  socket.on('ice-candidate', ({ target, candidate }) => {
      io.to(target).emit('ice-candidate', { candidate, from: socket.id });
  });

  socket.on('disconnecting', () => {
      socket.rooms.forEach(room => {
          socket.to(room).emit('user disconnected', socket.id);
      });
  });

  socket.on('hide remote cam', targetId => {
      io.to(targetId).emit('hide cam');
  });

  socket.on('show remote cam', targetId => {
      io.to(targetId).emit('show cam')
  })

});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
